datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  name        String?
  password    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  campaigns   Campaign[]
  inspections Inspection[]
  tokens      Token[]
}

model Token {
  id         Int       @id @default(autoincrement())
  type       TokenType @default(EMAIL)
  emailToken String?   @unique
  valid      Boolean   @default(true)
  expiration DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
}

model Harvest {
  id           Int  @id @default(autoincrement())
  start        DateTime
  end          DateTime
  startDry     DateTime?
  endDry       DateTime?
  startWet     DateTime?
  endWet       DateTime?
  campaigns    Campaign[]
  inspections  Inspection[]
}

model Campaign {
  id            Int       @id @default(autoincrement())
  name          String
  description   String?
  classesType   ClassType @default(DYNAMIC)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  classes       Class[]
  points        Point[]
  harvests      Harvest[]
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
}

model Point {
  id           Int          @id @default(autoincrement())
  lat          String
  lon          String
  description  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  inspections  Inspection[]
  campaign     Campaign     @relation(fields: [campaignId], references: [id])
  campaignId   Int
}

model Inspection {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  harvest     Harvest  @relation(fields: [harvestId], references: [id])
  harvestId   Int
  class       Class    @relation(fields: [classId], references: [id])
  classId     Int
  point       Point    @relation(fields: [pointId], references: [id])
  pointId     Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
}

model Class {
  id            Int @id   @default(autoincrement())
  name          String
  description   String?
  type          ClassType @default(DYNAMIC)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  campaigns     Campaign[]
  inspections   Inspection[]
}

enum TokenType {
  EMAIL
  API
}

enum ClassType {
  DYNAMIC
  IRRIGATED_NON_IRRIGATED
}